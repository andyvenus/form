{
    "docs": [
        {
            "location": "/", 
            "text": "AV Forms\n\n\nLets build some forms in laravel. \nGet started\n.", 
            "title": "Home"
        }, 
        {
            "location": "/#av-forms", 
            "text": "Lets build some forms in laravel.  Get started .", 
            "title": "AV Forms"
        }, 
        {
            "location": "/laravel-basics/", 
            "text": "Laravel Form Basics\n\n\nCreating a form blueprint\n\n\nThe first thing you need to do is create a form blueprint. See the \nform blueprints\n page for more info.\n\n\nUsing the FormBuilder to build the form\n\n\nYou will need to build your form in a controller. To do this you will need \nAV\\LaravelForm\\FormBuilder\n, but it's easy to get access to. Just type-hint it on your controller method and it will be automatically injected by Laravel\n\n\nuse Form;\n\n// within your controller\npublic function myControllerMethod(Request $request) \n{\n    $blueprint = new MyForm();\n\n    $form = Form::build($blueprint);\n}\n\n\n\nAfter building your form, you are given an instance of \nAV\\Form\\FormHandler\n\n\nCreate the view and render the form\n\n\nTo get a form ready to be rendered you need to call \ncreateView()\n on your built form. It's easiest to do this right at the point you pass it to the view\n\n\nuse Form;\n\n// within your controller\npublic function myControllerMethod(Request $request) \n{\n    $blueprint = new MyForm();\n\n    $form = Form::build($blueprint);\n\n    return view('my_template')-\nwith('form', $form-\ncreateView());\n}\n\n\n\nIn your template you will need to render the form. There are a few options that can give you a lot of control over how you display your form, but for now we are going to display the entire form in one go using the \nform()\n helper function.\n\n\nIf you are using blade, you can render your form like so:\n\n\n{!! form($form) !!}\n\n\n\nOr if you are using plain PHP templates:\n\n\n?php echo form($form);?\n\n\n\n\nYou should now see your form rendered, but it won't do much yet.\n\n\nChecking if the form was submitted \n valid\n\n\nTo check if the form was submitted, the request must be passed to the form handler. You can do this by using the second argument of the \nFormBuilder build()\n method or by calling \nhandleRequest()\n on the built form.\n\n\nYou can then check to see if the form was submitted using the \nisSubmitted()\n and \nisValid()\n methods on the built form.\n\n\nOne-page form submission\n\n\nThe simplest controller flow looks like this when a form submits to the same place it is displayed\n\n\npublic function myControllerMethod(Request $request) \n{\n    $blueprint = new MyForm();\n\n    $form = Form::build($blueprint, $request);\n\n    // form was submitted \n valid\n    if ($form-\nisValid()) {\n        $data = $form-\ngetData();\n\n        // do something with that data from the form\n    }\n\n    return view('my_template')-\nwith('form', $form-\ncreateView());\n}\n\n\n\nSubmit \n Redirect\n\n\nBut you may want to redirect users after the form is submitted to avoid accidental resubmissions of forms:\n\n\npublic function myControllerMethod(Request $request) \n{\n    $blueprint = new MyForm();\n\n    $form = Form::build($blueprint, $request);\n\n    // form was valid\n    if ($form-\nisValid()) {\n        $data = $form-\ngetData();\n\n        // do something with that data from the form\n\n        return redirect('/some/other/page');\n    }\n\n    // check if the form was submitted. if yes, redirect the user back as the form was not valid\n    if ($form-\nisSubmitted()) {\n        return back();\n    }\n\n    // otherwise, just render the page that shows the form\n    return view('my_template')-\nwith('form', $form-\ncreateView());\n}\n\n\n\nIf you redirect right after a form submission, the form will be automatically repopulated with the submitted data. If you don't want to restore the submitted data to the form after the redirect, call \n$form-\ncancelRestore()\n before you redirect.\n\n\nBinding a model\n\n\nBefore binding a model to a form, you must make sure any parameters you want the form to save are set as \nfillable\n on your eloquent model. The fields must be in the fillable array rather than the inverse using the guarded property.\n\n\nTo bind a model to a form, you can pass it as the 3rd parameter of the FormBuilder \nbuild()\n method or use the \nbindEntity()\n method on your built form.\n\n\npublic function myControllerMethod(Request $request) \n{\n    // Get a 'car'\n    $car = Car::find(1);\n\n    // Bind it using the 3rd parameter of the build method\n    $form = Form::build(new MyForm(), $request, $car);\n\n    // ALTERNATIVELY bind the model after the form has been built\n    // $form-\nbindEntity($car);\n\n\n\nYou can then save the form values to the model by calling \nsaveToEntities()\n on your built form. This only assignes the form values to the model, so remember to then call \nsave()\n on your model to save it's data to the database.\n\n\n    if ($form-\nisValid()) {\n        $form-\nsaveToEntities();\n\n        $car-\nsave();\n\n        return redirect('/some/other/page');\n    }\n\n    return view('my_template')-\nwith('form', $form-\ncreateView());\n}", 
            "title": "Basics"
        }, 
        {
            "location": "/laravel-basics/#laravel-form-basics", 
            "text": "", 
            "title": "Laravel Form Basics"
        }, 
        {
            "location": "/laravel-basics/#creating-a-form-blueprint", 
            "text": "The first thing you need to do is create a form blueprint. See the  form blueprints  page for more info.", 
            "title": "Creating a form blueprint"
        }, 
        {
            "location": "/laravel-basics/#using-the-formbuilder-to-build-the-form", 
            "text": "You will need to build your form in a controller. To do this you will need  AV\\LaravelForm\\FormBuilder , but it's easy to get access to. Just type-hint it on your controller method and it will be automatically injected by Laravel  use Form;\n\n// within your controller\npublic function myControllerMethod(Request $request) \n{\n    $blueprint = new MyForm();\n\n    $form = Form::build($blueprint);\n}  After building your form, you are given an instance of  AV\\Form\\FormHandler", 
            "title": "Using the FormBuilder to build the form"
        }, 
        {
            "location": "/laravel-basics/#create-the-view-and-render-the-form", 
            "text": "To get a form ready to be rendered you need to call  createView()  on your built form. It's easiest to do this right at the point you pass it to the view  use Form;\n\n// within your controller\npublic function myControllerMethod(Request $request) \n{\n    $blueprint = new MyForm();\n\n    $form = Form::build($blueprint);\n\n    return view('my_template')- with('form', $form- createView());\n}  In your template you will need to render the form. There are a few options that can give you a lot of control over how you display your form, but for now we are going to display the entire form in one go using the  form()  helper function.  If you are using blade, you can render your form like so:  {!! form($form) !!}  Or if you are using plain PHP templates:  ?php echo form($form);?   You should now see your form rendered, but it won't do much yet.", 
            "title": "Create the view and render the form"
        }, 
        {
            "location": "/laravel-basics/#checking-if-the-form-was-submitted-valid", 
            "text": "To check if the form was submitted, the request must be passed to the form handler. You can do this by using the second argument of the  FormBuilder build()  method or by calling  handleRequest()  on the built form.  You can then check to see if the form was submitted using the  isSubmitted()  and  isValid()  methods on the built form.  One-page form submission  The simplest controller flow looks like this when a form submits to the same place it is displayed  public function myControllerMethod(Request $request) \n{\n    $blueprint = new MyForm();\n\n    $form = Form::build($blueprint, $request);\n\n    // form was submitted   valid\n    if ($form- isValid()) {\n        $data = $form- getData();\n\n        // do something with that data from the form\n    }\n\n    return view('my_template')- with('form', $form- createView());\n}  Submit   Redirect  But you may want to redirect users after the form is submitted to avoid accidental resubmissions of forms:  public function myControllerMethod(Request $request) \n{\n    $blueprint = new MyForm();\n\n    $form = Form::build($blueprint, $request);\n\n    // form was valid\n    if ($form- isValid()) {\n        $data = $form- getData();\n\n        // do something with that data from the form\n\n        return redirect('/some/other/page');\n    }\n\n    // check if the form was submitted. if yes, redirect the user back as the form was not valid\n    if ($form- isSubmitted()) {\n        return back();\n    }\n\n    // otherwise, just render the page that shows the form\n    return view('my_template')- with('form', $form- createView());\n}  If you redirect right after a form submission, the form will be automatically repopulated with the submitted data. If you don't want to restore the submitted data to the form after the redirect, call  $form- cancelRestore()  before you redirect.", 
            "title": "Checking if the form was submitted &amp; valid"
        }, 
        {
            "location": "/laravel-basics/#binding-a-model", 
            "text": "Before binding a model to a form, you must make sure any parameters you want the form to save are set as  fillable  on your eloquent model. The fields must be in the fillable array rather than the inverse using the guarded property.  To bind a model to a form, you can pass it as the 3rd parameter of the FormBuilder  build()  method or use the  bindEntity()  method on your built form.  public function myControllerMethod(Request $request) \n{\n    // Get a 'car'\n    $car = Car::find(1);\n\n    // Bind it using the 3rd parameter of the build method\n    $form = Form::build(new MyForm(), $request, $car);\n\n    // ALTERNATIVELY bind the model after the form has been built\n    // $form- bindEntity($car);  You can then save the form values to the model by calling  saveToEntities()  on your built form. This only assignes the form values to the model, so remember to then call  save()  on your model to save it's data to the database.      if ($form- isValid()) {\n        $form- saveToEntities();\n\n        $car- save();\n\n        return redirect('/some/other/page');\n    }\n\n    return view('my_template')- with('form', $form- createView());\n}", 
            "title": "Binding a model"
        }, 
        {
            "location": "/laravel-validation/", 
            "text": "Laravel Validation\n\n\nAV Forms integrate with Laravel's \nvalidator\n\n\nAdding validation to a field\n\n\nValidation is easily added to any form field via the \nvalidation\n option when creating a field\n\n\n$blueprint = new FormBlueprint();\n\n$blueprint-\nadd('website_url', 'text', [\n    'label' =\n 'A label',\n    'validation' =\n 'max:100|url'\n]);\n\n\n\nAdding validation to a model\n\n\nYou can also set validation on a model that will be combined with any form validation. To do this, add a \ngetValidationRules\n method to your model that return an array of validation data just like is shown in the laravel validation documentation.\n\n\n// within your eloquent model\npublic function getValidationRules()\n{\n    return [\n        'my_database_field' =\n 'max:30',\n        'example_url_field' =\n 'url'\n    ];\n}\n\n\n\nAdding a custom error message to the form\n\n\nIf you want to set a custom error message on the form, you can do so with the addCustomErrors method on the form handler:\n\n\nuse AV\\Form\\FormBlueprint;\nuse AV\\Form\\FormError;\n\n$blueprint = new FormBlueprint();\n\n$blueprint-\nadd('website_url', 'text', [\n    'label' =\n 'A label',\n]);\n\n$form = Form::build($blueprint);\n\nif ($form-\nisSubmitted()) {\n    if ($form-\ngetData('website_url') != 'http://www.google.com') {\n        $form-\naddCustomErrors([new FormError('website_url', 'Website URL must be http://www.google.com')]);\n    }\n}\n\n// if ($form-\nisValid()) ... etc\n\n\n\nThe first parameter of the FormError class is the field name related to the error and the second parameter is the error you want to display. When you add a custom error, the form is considered to have validation errors and \nisValid\n will return false.", 
            "title": "Validation"
        }, 
        {
            "location": "/laravel-validation/#laravel-validation", 
            "text": "AV Forms integrate with Laravel's  validator", 
            "title": "Laravel Validation"
        }, 
        {
            "location": "/laravel-validation/#adding-validation-to-a-field", 
            "text": "Validation is easily added to any form field via the  validation  option when creating a field  $blueprint = new FormBlueprint();\n\n$blueprint- add('website_url', 'text', [\n    'label' =  'A label',\n    'validation' =  'max:100|url'\n]);", 
            "title": "Adding validation to a field"
        }, 
        {
            "location": "/laravel-validation/#adding-validation-to-a-model", 
            "text": "You can also set validation on a model that will be combined with any form validation. To do this, add a  getValidationRules  method to your model that return an array of validation data just like is shown in the laravel validation documentation.  // within your eloquent model\npublic function getValidationRules()\n{\n    return [\n        'my_database_field' =  'max:30',\n        'example_url_field' =  'url'\n    ];\n}", 
            "title": "Adding validation to a model"
        }, 
        {
            "location": "/laravel-validation/#adding-a-custom-error-message-to-the-form", 
            "text": "If you want to set a custom error message on the form, you can do so with the addCustomErrors method on the form handler:  use AV\\Form\\FormBlueprint;\nuse AV\\Form\\FormError;\n\n$blueprint = new FormBlueprint();\n\n$blueprint- add('website_url', 'text', [\n    'label' =  'A label',\n]);\n\n$form = Form::build($blueprint);\n\nif ($form- isSubmitted()) {\n    if ($form- getData('website_url') != 'http://www.google.com') {\n        $form- addCustomErrors([new FormError('website_url', 'Website URL must be http://www.google.com')]);\n    }\n}\n\n// if ($form- isValid()) ... etc  The first parameter of the FormError class is the field name related to the error and the second parameter is the error you want to display. When you add a custom error, the form is considered to have validation errors and  isValid  will return false.", 
            "title": "Adding a custom error message to the form"
        }, 
        {
            "location": "/form-blueprints/", 
            "text": "Creating a form blueprint\n\n\nAll forms must be built using the \nAV\\Form\\FormBlueprint\n class.\n\n\nYou can create a new instance of FormBlueprint anywhere and start adding fields.\n\n\nuse AV\\Form\\FormBlueprint;\n\n$blueprint = new FormBlueprint();\n\n$blueprint-\nadd('field_name', 'text', ['label' =\n 'My Field']);\n\n\n\nThis is fine, but it's going to clutter up your controllers and mean the form cannot be reused. So the recommended way to build a form is to instead extend the FormBlueprint class and have it build itself in the constructor.\n\n\nuse AV\\Form\\FormBlueprint;\n\nclass MyForm extends FormBlueprint\n{\n    public function __construct()\n    {\n        $this-\nadd('field_name', 'text');\n\n        // and so on...\n    }\n}\n\n\n\nUseful Methods\n\n\nsetAction($url)\n\n\nSet the URL a form will submit to. By default, forms submit to the page they are displayed on.\n\n\nsetMethod($method)\n\n\nSet the form method (either GET or POST). Defaults to POST.\n\n\nsetName($name)\n\n\nSet the name of the form\n\n\nadd($name, $type, array $options)\n\n\nAdds a field to the FormBlueprint\n\n\naddBefore/addAfter($offset, $name, $type, array $options)\n\n\nAdds a field before/after an existing field in the form\n\n\nreplace($name, $type, array $options)\n\n\nReplace an existing field\n\n\nremove($name)\n\n\nRemove a field\n\n\nhas($name)\n\n\nCheck if a field with a given name exists\n\n\nsetSuccessMessage($message)\n\n\nSet the message to give when a valid form was successfully submitted", 
            "title": "Blueprints"
        }, 
        {
            "location": "/form-blueprints/#creating-a-form-blueprint", 
            "text": "All forms must be built using the  AV\\Form\\FormBlueprint  class.  You can create a new instance of FormBlueprint anywhere and start adding fields.  use AV\\Form\\FormBlueprint;\n\n$blueprint = new FormBlueprint();\n\n$blueprint- add('field_name', 'text', ['label' =  'My Field']);  This is fine, but it's going to clutter up your controllers and mean the form cannot be reused. So the recommended way to build a form is to instead extend the FormBlueprint class and have it build itself in the constructor.  use AV\\Form\\FormBlueprint;\n\nclass MyForm extends FormBlueprint\n{\n    public function __construct()\n    {\n        $this- add('field_name', 'text');\n\n        // and so on...\n    }\n}", 
            "title": "Creating a form blueprint"
        }, 
        {
            "location": "/form-blueprints/#useful-methods", 
            "text": "setAction($url)  Set the URL a form will submit to. By default, forms submit to the page they are displayed on.  setMethod($method)  Set the form method (either GET or POST). Defaults to POST.  setName($name)  Set the name of the form  add($name, $type, array $options)  Adds a field to the FormBlueprint  addBefore/addAfter($offset, $name, $type, array $options)  Adds a field before/after an existing field in the form  replace($name, $type, array $options)  Replace an existing field  remove($name)  Remove a field  has($name)  Check if a field with a given name exists  setSuccessMessage($message)  Set the message to give when a valid form was successfully submitted", 
            "title": "Useful Methods"
        }, 
        {
            "location": "/fields/", 
            "text": "Field options\n\n\nThis page lists all the different field types and their options\n\n\nAll Fields\n\n\nMost fields share these common options\n\n\ndefault\n\n\nThe default value of the field\n\n\nlabel\n\n\nThe label displayed next to the field\n\n\nhelp\n\n\nAny useful information you want to display next to the field. Can contain HTML.\n\n\nrequired\n\n\nIf set to true, the field must not be left blank by the user and an asterisk will be shown next to the label.\n\n\nallow_unset\n\n\nForms work out if they were submitted by the existence of the form data in the GET or POST request. If a field is missing from the request, the form will not consider itself submitted. If \nallow_unset\n is \ntrue\n, that field can be missing from the submitted data. This is specifically for allowing fields to be outright missing from the request, fields simply left blank by the user are always considered submitted.\n\n\nBe warned, if your form is made out of entirely of fields that can be unset, there'll be no way for the form to know if it's submitted. Consider adding a hidden field if you want to allow all other fields to be unset.\n\n\nattr\n\n\nThis is an array of HTML attributes to give to the field. For example, if you want to set an ID on a form field you can do it like so:\n\n\n'attr' =\n [\n    'id' =\n 'important'\n]\n\n\n\nText\n\n\n$form-\nadd('field_name', 'text', [\n    'label' =\n 'My Label'\n]);\n\n\n\nno_trim\n\n\nBy default text fields (and only text fields) will pass submitted values through PHP's \ntrim()\n function to remove whitespace. Set \nno_trim\n to \ntrue\n to disable this on a field.\n\n\nPassword\n\n\n$form-\nadd('field_name', 'password', [\n    'label' =\n 'My Label'\n]);\n\n\n\nHidden\n\n\n$form-\nadd('field_name', 'hidden');\n\n\n\nTextarea\n\n\n$form-\nadd('field_name', 'textarea', [\n    'label' =\n 'My Label'\n]);\n\n\n\nFile\n\n\n$form-\nadd('field_name', 'file', [\n    'label' =\n 'My Label'\n]);\n\n\n\nSelect\n\n\n$form-\nadd('field_name', 'select', [\n    'label' =\n 'My Label',\n    'choices' =\n [\n        'value' =\n 'Label',\n        'second' =\n 'Another Choice'\n    ]\n]);\n\n\n\nchoices\n\n\nAn array of choices for the select field. The above shows the basic key/value array of choices. You can also create groups like so:\n\n\n$form-\nadd('field_name', 'select', [\n    'label' =\n 'My Label',\n    'choices' =\n [\n        'Group Label' =\n [\n            'value' =\n 'Label',\n            'second' =\n 'Another Choice'\n        ],\n        'Group Two' =\n [\n            'another' =\n 'Another',\n        ]\n    ]\n]);\n\n\n\nRadio Group\n\n\n$form-\nadd('field_name', 'radio', [\n    'label' =\n 'My Label',\n    'choices' =\n [\n        'value' =\n 'Label',\n        'second' =\n 'Another Choice'\n    ]\n]);\n\n\n\nchoices\n\n\nAn array of different choices for the radio group\n\n\nCheckbox\n\n\n$form-\nadd('field_name', 'radio', [\n    'label' =\n 'My Label',\n    'choices' =\n [\n        'checked_value' =\n 'yes',\n        'unchecked_value' =\n 'no',\n        'default' =\n 'yes'\n    ]\n]);\n\n\n\nCheckboxes work a little differently to other field types because when unchecked they don't send anything back to the server. So this means that \nallow_unset\n defaults to \ntrue\n and cannot be changed.\n\n\nAs receiving nothing is rarely useful, AV Forms allow you to set a 'checked' value and an 'unchecked' value.\n\n\nchecked_value\n\n\nIf the checkbox was ticked, this is the value you will be get from the form. This will also be set on any entities/models. Defaults to 1.\n\n\nunchecked_value\n\n\nIf the checkbox was \nnot\n ticked by the user, this is the value you will be get from the form. This will also be set on any entities/models. Defaults to 0.", 
            "title": "Fields"
        }, 
        {
            "location": "/fields/#field-options", 
            "text": "This page lists all the different field types and their options", 
            "title": "Field options"
        }, 
        {
            "location": "/fields/#all-fields", 
            "text": "Most fields share these common options  default  The default value of the field  label  The label displayed next to the field  help  Any useful information you want to display next to the field. Can contain HTML.  required  If set to true, the field must not be left blank by the user and an asterisk will be shown next to the label.  allow_unset  Forms work out if they were submitted by the existence of the form data in the GET or POST request. If a field is missing from the request, the form will not consider itself submitted. If  allow_unset  is  true , that field can be missing from the submitted data. This is specifically for allowing fields to be outright missing from the request, fields simply left blank by the user are always considered submitted.  Be warned, if your form is made out of entirely of fields that can be unset, there'll be no way for the form to know if it's submitted. Consider adding a hidden field if you want to allow all other fields to be unset.  attr  This is an array of HTML attributes to give to the field. For example, if you want to set an ID on a form field you can do it like so:  'attr' =  [\n    'id' =  'important'\n]", 
            "title": "All Fields"
        }, 
        {
            "location": "/fields/#text", 
            "text": "$form- add('field_name', 'text', [\n    'label' =  'My Label'\n]);  no_trim  By default text fields (and only text fields) will pass submitted values through PHP's  trim()  function to remove whitespace. Set  no_trim  to  true  to disable this on a field.", 
            "title": "Text"
        }, 
        {
            "location": "/fields/#password", 
            "text": "$form- add('field_name', 'password', [\n    'label' =  'My Label'\n]);", 
            "title": "Password"
        }, 
        {
            "location": "/fields/#hidden", 
            "text": "$form- add('field_name', 'hidden');", 
            "title": "Hidden"
        }, 
        {
            "location": "/fields/#textarea", 
            "text": "$form- add('field_name', 'textarea', [\n    'label' =  'My Label'\n]);", 
            "title": "Textarea"
        }, 
        {
            "location": "/fields/#file", 
            "text": "$form- add('field_name', 'file', [\n    'label' =  'My Label'\n]);", 
            "title": "File"
        }, 
        {
            "location": "/fields/#select", 
            "text": "$form- add('field_name', 'select', [\n    'label' =  'My Label',\n    'choices' =  [\n        'value' =  'Label',\n        'second' =  'Another Choice'\n    ]\n]);  choices  An array of choices for the select field. The above shows the basic key/value array of choices. You can also create groups like so:  $form- add('field_name', 'select', [\n    'label' =  'My Label',\n    'choices' =  [\n        'Group Label' =  [\n            'value' =  'Label',\n            'second' =  'Another Choice'\n        ],\n        'Group Two' =  [\n            'another' =  'Another',\n        ]\n    ]\n]);", 
            "title": "Select"
        }, 
        {
            "location": "/fields/#radio-group", 
            "text": "$form- add('field_name', 'radio', [\n    'label' =  'My Label',\n    'choices' =  [\n        'value' =  'Label',\n        'second' =  'Another Choice'\n    ]\n]);  choices  An array of different choices for the radio group", 
            "title": "Radio Group"
        }, 
        {
            "location": "/fields/#checkbox", 
            "text": "$form- add('field_name', 'radio', [\n    'label' =  'My Label',\n    'choices' =  [\n        'checked_value' =  'yes',\n        'unchecked_value' =  'no',\n        'default' =  'yes'\n    ]\n]);  Checkboxes work a little differently to other field types because when unchecked they don't send anything back to the server. So this means that  allow_unset  defaults to  true  and cannot be changed.  As receiving nothing is rarely useful, AV Forms allow you to set a 'checked' value and an 'unchecked' value.  checked_value  If the checkbox was ticked, this is the value you will be get from the form. This will also be set on any entities/models. Defaults to 1.  unchecked_value  If the checkbox was  not  ticked by the user, this is the value you will be get from the form. This will also be set on any entities/models. Defaults to 0.", 
            "title": "Checkbox"
        }
    ]
}